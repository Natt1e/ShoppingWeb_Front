{"ast":null,"code":"export default {\n  name: 'collapse',\n  model: {\n    prop: 'visible',\n    event: 'change'\n  },\n  props: {\n    visible: Boolean,\n    // 默认显示的内容高度\n    defaultHeight: {\n      type: Number,\n      default: 100\n    },\n    // 是否隐藏内置控制按钮\n    hideControll: Boolean,\n    // 是否隐藏内置控制按钮icon\n    hideControllIcon: Boolean,\n    foldText: {\n      type: String,\n      default: '收起'\n    },\n    unfoldText: {\n      type: String,\n      default: '展开'\n    }\n  },\n\n  data() {\n    return {\n      isShow: false,\n      controllVisible: true,\n      containerH: this.defaultHeight,\n      contentH: 0,\n      DOMWatcher: null\n    };\n  },\n\n  watch: {\n    visible(v) {\n      if (v) {\n        this.unfold();\n      } else {\n        this.fold();\n      }\n    },\n\n    isShow(v) {\n      this.$emit('change', v);\n    }\n\n  },\n\n  mounted() {\n    this.init();\n    this.watch();\n\n    if (this.visible) {\n      this.unfold();\n    }\n  },\n\n  destroyed() {\n    this.DOMWatcher.disconnect();\n  },\n\n  methods: {\n    init() {\n      this.contentH = this.$refs.content.offsetHeight;\n      /**\r\n       * 当内容变化的同时也是展开状态的话，那么需要更新容器高度\r\n       * 1. 当最新的内容高度大于默认高度时，则把容器高度更新最新内容高度一致即可\r\n       * 2. 反之，把容器高度设到最小（即默认高度），同时设为收起状态\r\n       */\n\n      if (this.isShow) {\n        if (this.contentH > this.defaultHeight) {\n          this.containerH = this.contentH;\n        } else {\n          this.containerH = this.defaultHeight;\n          this.isShow = false;\n        }\n      }\n\n      this.controllVisible = this.contentH > this.defaultHeight; // 控制按钮的显示隐藏\n    },\n\n    watch() {\n      this.DOMWatcher = new MutationObserver(() => {\n        // 监测到DOM变化，重新计算高度\n        this.refresh();\n      });\n      this.DOMWatcher.observe(this.$refs.content, {\n        childList: true,\n        attributes: true,\n        characterData: true,\n        subtree: true\n      });\n    },\n\n    refresh() {\n      this.$nextTick(() => {\n        this.init();\n      });\n    },\n\n    handleControll() {\n      let handle = this.isShow ? this.fold : this.unfold;\n      handle();\n    },\n\n    // 收起\n    fold() {\n      this.containerH = this.defaultHeight;\n      this.$nextTick(() => {\n        this.isShow = false;\n      });\n    },\n\n    // 展开\n    unfold() {\n      const contentH = this.$refs.content.offsetHeight;\n\n      if (contentH > this.defaultHeight) {\n        this.containerH = contentH;\n      }\n\n      this.$nextTick(() => {\n        this.isShow = true;\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAmBA;EACAA,gBADA;EAEAC;IACAC,eADA;IAEAC;EAFA,CAFA;EAMAC;IACAC,gBADA;IAGA;IACAC;MACAC,YADA;MAEAC;IAFA,CAJA;IAQA;IACAC,qBATA;IAUA;IACAC,yBAXA;IAYAC;MACAJ,YADA;MAEAC;IAFA,CAZA;IAgBAI;MACAL,YADA;MAEAC;IAFA;EAhBA,CANA;;EA2BAK;IACA;MACAC,aADA;MAEAC,qBAFA;MAGAC,8BAHA;MAIAC,WAJA;MAKAC;IALA;EAOA,CAnCA;;EAoCAC;IACAd;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CAPA;;IAQAS;MACA;IACA;;EAVA,CApCA;;EAgDAM;IACA;IACA;;IACA;MACA;IACA;EACA,CAtDA;;EAuDAC;IACA;EACA,CAzDA;;EA0DAC;IACAC;MACA;MACA;AACA;AACA;AACA;AACA;;MACA;QACA;UACA;QACA,CAFA,MAEA;UACA;UACA;QACA;MACA;;MACA,0DAfA,CAeA;IACA,CAjBA;;IAkBAJ;MACA;QACA;QACA;MACA,CAHA;MAIA;QACAK,eADA;QAEAC,gBAFA;QAGAC,mBAHA;QAIAC;MAJA;IAMA,CA7BA;;IA8BAC;MACA;QACA;MACA,CAFA;IAGA,CAlCA;;IAmCAC;MACA;MACAC;IACA,CAtCA;;IAuCA;IACAC;MACA;MACA;QACA;MACA,CAFA;IAGA,CA7CA;;IA8CA;IACAC;MACA;;MACA;QACA;MACA;;MACA;QACA;MACA,CAFA;IAGA;;EAvDA;AA1DA","names":["name","model","prop","event","props","visible","defaultHeight","type","default","hideControll","hideControllIcon","foldText","unfoldText","data","isShow","controllVisible","containerH","contentH","DOMWatcher","watch","mounted","destroyed","methods","init","childList","attributes","characterData","subtree","refresh","handleControll","handle","fold","unfold"],"sourceRoot":"src/components","sources":["MyCollapse.vue"],"sourcesContent":["<template>\r\n    <section \r\n        class=\"collapse\" \r\n        ref=\"collapse\" \r\n        :style=\"{height: containerH + 'px', 'padding-right': (hideControll ? 0 : 50) + 'px'}\"\r\n    >\r\n        <div class=\"collapse-content\" ref=\"content\">\r\n            <slot></slot>\r\n            <div>111</div>\r\n        </div>\r\n        <span  class=\"collapse-controll\" @click=\"handleControll\">\r\n            <i v-show=\"!hideControllIcon\" class=\"collapse-controll-icon\" :class=\"isShow ? 'el-icon-arrow-up' : 'el-icon-arrow-down'\"></i>\r\n            {{isShow ? foldText : unfoldText}}\r\n            \r\n        </span>\r\n    </section>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'collapse',\r\n    model: {\r\n        prop: 'visible',\r\n        event: 'change'\r\n    },\r\n    props: {\r\n        visible: Boolean,\r\n\r\n        // 默认显示的内容高度\r\n        defaultHeight: {\r\n            type: Number,\r\n            default: 100\r\n        },\r\n        // 是否隐藏内置控制按钮\r\n        hideControll: Boolean,\r\n        // 是否隐藏内置控制按钮icon\r\n        hideControllIcon: Boolean,\r\n        foldText: {\r\n            type: String,\r\n            default: '收起'\r\n        },\r\n        unfoldText: {\r\n            type: String,\r\n            default: '展开'\r\n        }\r\n    },\r\n    data(){\r\n        return {\r\n            isShow: false,\r\n            controllVisible: true,\r\n            containerH: this.defaultHeight,\r\n            contentH: 0,\r\n            DOMWatcher: null,\r\n        }\r\n    },\r\n    watch: {\r\n        visible(v){\r\n            if(v){\r\n                this.unfold();\r\n            }else{\r\n                this.fold();\r\n            }\r\n        },\r\n        isShow(v){\r\n            this.$emit('change', v);\r\n        }\r\n    },\r\n    mounted(){\r\n        this.init();\r\n        this.watch();\r\n        if(this.visible){\r\n            this.unfold();\r\n        }\r\n    },\r\n    destroyed(){\r\n        this.DOMWatcher.disconnect();\r\n    },\r\n    methods: {\r\n        init(){\r\n            this.contentH = this.$refs.content.offsetHeight;\r\n            /**\r\n             * 当内容变化的同时也是展开状态的话，那么需要更新容器高度\r\n             * 1. 当最新的内容高度大于默认高度时，则把容器高度更新最新内容高度一致即可\r\n             * 2. 反之，把容器高度设到最小（即默认高度），同时设为收起状态\r\n             */\r\n            if(this.isShow){\r\n                if(this.contentH > this.defaultHeight){\r\n                    this.containerH = this.contentH;\r\n                }else{\r\n                    this.containerH = this.defaultHeight;\r\n                    this.isShow = false;\r\n                }\r\n            }\r\n            this.controllVisible = this.contentH > this.defaultHeight; // 控制按钮的显示隐藏\r\n        },\r\n        watch(){\r\n            this.DOMWatcher = new MutationObserver(() =>{\r\n                // 监测到DOM变化，重新计算高度\r\n                this.refresh();\r\n            })\r\n            this.DOMWatcher.observe(this.$refs.content, {\r\n                childList: true,\r\n                attributes: true,\r\n                characterData: true,\r\n                subtree: true\r\n            })\r\n        },\r\n        refresh(){\r\n            this.$nextTick(() => {\r\n                this.init();\r\n            })\r\n        },\r\n        handleControll(){\r\n            let handle = this.isShow ? this.fold : this.unfold;\r\n            handle();\r\n        },\r\n        // 收起\r\n        fold(){\r\n            this.containerH = this.defaultHeight;\r\n            this.$nextTick(() => {\r\n                this.isShow = false;\r\n            })\r\n        },\r\n        // 展开\r\n        unfold(){\r\n            const contentH = this.$refs.content.offsetHeight;\r\n            if(contentH > this.defaultHeight){\r\n                this.containerH = contentH;\r\n            }\r\n            this.$nextTick(() => {\r\n                this.isShow = true;\r\n            })\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.collapse{\r\n    width: 100%;\r\n    position: relative;\r\n    overflow: hidden;\r\n    transition: height .28s ease-in-out;\r\n}\r\n.collapse-controll{\r\n    position: absolute;\r\n    bottom: 0px;\r\n    right: 8px;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n    color: #6ABCFF;\r\n    cursor: pointer;\r\n}\r\n.collapse-controll-icon{\r\n    margin-right: 2px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}